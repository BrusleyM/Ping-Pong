name: Unity VR Android Build

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  build:
    name: Build Unity VR Project
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository in detached HEAD
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Checkout detached HEAD
        run: |
          git fetch --depth=1
          git checkout --detach

      # Step 2: Cache Unity Library folder (Android only)
      - name: Cache Unity Library
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-Android-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: Library-Android-

      # Step 3: Cache Gradle dependencies
      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: ~/.gradle
          key: gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-

      # Step 4: Ensure build folder exists
      - name: Ensure build folder exists
        run: mkdir -p Builds/Android

      # Step 5: Apply CI manifests (temporary)
      - name: Apply CI manifests
        run: |
          echo "Applying CI manifests temporarily..."
          cp Packages/manifest.ci.json Packages/manifest.json
          cp Packages/packages-lock.ci.json Packages/packages-lock.json
          echo "CI manifests applied."

      # Step 6: Free disk space before Unity build
      - name: Free disk space
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true

      # Step 7: Build Unity Project
      - name: Build Unity Project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          CI: true
        with:
          targetPlatform: Android
          buildMethod: BuildScript.Execute
          buildsPath: Builds/Android
          allowDirtyBuild: true

      # Step 8: Upload Meta Quest Build
      - name: Upload Meta Quest Build
        uses: RageAgainstThePixel/upload-meta-quest-build@v2
        with:
          appId: ${{ secrets.META_APP_ID }}
          appSecret: ${{ secrets.META_APP_SECRET }}
          buildDir: 'Builds/Android'
          releaseChannel: 'ALPHA'
          ageGroup: 'TEENS_AND_ADULTS'
          draft: false
          releaseNotes: 'Automated build upload'
          
      # Step 9: Upload build artifacts
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Unity-Build
          path: Builds/Android
