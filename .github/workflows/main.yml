name: Unity VR Android Build

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - develop

permissions:
  contents: write

jobs:
  build:
    name: Build Unity Android
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Cache Git LFS
        uses: actions/cache@v4
        with:
          path: .git/lfs/objects
          key: ${{ runner.os }}-lfs-${{ hashFiles('**/Assets/**') }}

      - name: Cache Unity Library
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-Android-${{ hashFiles('Assets/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-Android-

      - name: Cache Gradle packages and build cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.android/build-cache
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradle-wrapper.properties', '**/build.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Ensure PR-specific build folder
        run: |
          mkdir -p Builds/Android/PR-${{ github.event.pull_request.number }}

      - name: Apply CI manifests
        run: |
          cp Packages/manifest.ci.json Packages/manifest.json
          cp Packages/packages-lock.ci.json Packages/packages-lock.json

      - name: Free disk space
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: true
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true

      - name: Build Unity Project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          CI: true
        with:
          targetPlatform: Android
          buildMethod: BuildScript.Execute
          buildsPath: Builds/Android
          allowDirtyBuild: true

      # Move APK(s) and ProjectSettings.asset to PR folder
      - name: Move build and project settings to PR folder
        run: |
          PR_NUM=${{ github.event.pull_request.number }}
          mkdir -p Builds/Android/PR-${PR_NUM}
          find Builds/Android -maxdepth 1 -type f -name "*.apk" -exec mv {} Builds/Android/PR-${PR_NUM}/ \;
          if [ -f ProjectSettings/ProjectSettings.asset ]; then
            mv ProjectSettings/ProjectSettings.asset Builds/Android/PR-${PR_NUM}/ProjectSettings.asset
          fi

      # Upload build and project settings only
      - name: Upload PR Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Unity-Build-PR-${{ github.event.pull_request.number }}
          path: |
            Builds/Android/PR-${{ github.event.pull_request.number }}/*.apk
            Builds/Android/PR-${{ github.event.pull_request.number }}/ProjectSettings.asset
